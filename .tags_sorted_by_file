Body	code\body.py	/^class Body(Packer):$/;"	c
__init__	code\body.py	/^	def __init__(self, mod):$/;"	m	class:Body
dealPng	code\body.py	/^	def dealPng(self, dirsrc):$/;"	m	class:Body
Building	code\building.py	/^class Building(Packer):$/;"	c
__init__	code\building.py	/^	def __init__(self, mod):$/;"	m	class:Building
renameSubdir	code\building.py	/^	def renameSubdir(self, src):$/;"	m	class:Building
runAll	code\building.py	/^	def runAll(self, jsfl, ttdir, fdir):$/;"	m	class:Building
SVNotFound	code\cleanprocess.py	/^from code.packexp import SVNotFound$/;"	i
cleanprocess	code\cleanprocess.py	/^def cleanprocess(tmpdir, body=''):$/;"	f
copy2SVN	code\cleanprocess.py	/^def copy2SVN(src, mtype, types):$/;"	f
getSvnAddr	code\cleanprocess.py	/^def getSvnAddr(fname,mtype, types):$/;"	f
DBody	code\dbody.py	/^class DBody(Packer):$/;"	c
__init__	code\dbody.py	/^	def __init__(self, mod):$/;"	m	class:DBody
dealPng	code\dbody.py	/^	def dealPng(self, dirsrc):$/;"	m	class:DBody
getModname	code\dbody.py	/^	def getModname(self):$/;"	m	class:DBody
DHead	code\dhead.py	/^class DHead(Packer):$/;"	c
__init__	code\dhead.py	/^	def __init__(self,mod):$/;"	m	class:DHead
dealPng	code\dhead.py	/^	def dealPng(self, dirsrc):$/;"	m	class:DHead
getModname	code\dhead.py	/^	def getModname(self):$/;"	m	class:DHead
Head	code\head.py	/^class Head(Packer):$/;"	c
__init__	code\head.py	/^	def __init__(self,mod):$/;"	m	class:Head
dealPng	code\head.py	/^	def dealPng(self, dirsrc):$/;"	m	class:Head
DEBUG	code\misc.py	/^DEBUG = True$/;"	v
FLOCK	code\misc.py	/^FLOCK = threading.Lock()$/;"	v
args	code\misc.py	/^	args = 'a,b,c,d,e'$/;"	v
func	code\misc.py	/^	func = 'newfunc'$/;"	v
genThread	code\misc.py	/^def genThread(func, *args):$/;"	f
threading	code\misc.py	/^import threading $/;"	i
baseName	code\packHelper.py	/^def baseName(path):$/;"	f
chkType	code\packHelper.py	/^def chkType(fn):$/;"	f
copyFile	code\packHelper.py	/^def copyFile(src, dest):$/;"	f
copyFiles	code\packHelper.py	/^def copyFiles(src, dest, recur=True,ignore=None):$/;"	f
countDir	code\packHelper.py	/^def countDir(root):$/;"	f
countFile	code\packHelper.py	/^def countFile(root):$/;"	f
dirName	code\packHelper.py	/^def dirName(path):$/;"	f
emptyDir	code\packHelper.py	/^def emptyDir(path):$/;"	f
genPath	code\packHelper.py	/^def genPath(root, path):$/;"	f
indent	code\packHelper.py	/^def indent(elem, level=0):$/;"	f
mkDir	code\packHelper.py	/^def mkDir(paths):$/;"	f
nonemptyDir	code\packHelper.py	/^def nonemptyDir(path):$/;"	f
os	code\packHelper.py	/^import os $/;"	i
rmDir	code\packHelper.py	/^def rmDir(dirname):$/;"	f
scanDir	code\packHelper.py	/^def scanDir(root, withpath=True):$/;"	f
scanFile	code\packHelper.py	/^def scanFile(root, withpath=True):$/;"	f
scanFiles	code\packHelper.py	/^def scanFiles(root,withpath=True):$/;"	f
shutil	code\packHelper.py	/^import shutil$/;"	i
smail	code\packHelper.py	/^def smail(receiver,subject,fname=None,mbody=None):$/;"	f
sys	code\packHelper.py	/^import sys$/;"	i
BACKQUALITY	code\packdata.py	/^BACKQUALITY = "80"$/;"	v
PICQUALITY	code\packdata.py	/^PICQUALITY = "80"$/;"	v
PackData	code\packdata.py	/^class PackData(object):$/;"	c
__init__	code\packdata.py	/^	def __init__(self, modpath):$/;"	m	class:PackData
countPics	code\packdata.py	/^	def countPics(self): #modpath = command xxx$/;"	m	class:PackData
et	code\packdata.py	/^import xml.etree.ElementTree as et$/;"	i
etree	code\packdata.py	/^import xml.etree.ElementTree as et$/;"	i
genjsfl	code\packdata.py	/^	def genjsfl(self, modname, jsflpath):$/;"	m	class:PackData
genroot	code\packdata.py	/^	def genroot(self, modname):   #modname = commando ...$/;"	m	class:PackData
getachive	code\packdata.py	/^	def getachive(self,modpath):$/;"	m	class:PackData
getitems	code\packdata.py	/^	def getitems(self, ttxml,replace):$/;"	m	class:PackData
getxy	code\packdata.py	/^	def getxy(self, path):$/;"	m	class:PackData
savexml	code\packdata.py	/^	def savexml(self,fname):$/;"	m	class:PackData
wbackground	code\packdata.py	/^	def wbackground(self,xitem):$/;"	m	class:PackData
wbody	code\packdata.py	/^	def wbody(self, pdata, dirname, replace):$/;"	m	class:PackData
witem	code\packdata.py	/^	def witem(self,types='movie', iname='mc', lname='AnimationClip'):$/;"	m	class:PackData
wlabel	code\packdata.py	/^	def wlabel(self, dirname, replace, xitem):$/;"	m	class:PackData
wpics	code\packdata.py	/^	def wpics(self, dirname, replace, xitem):$/;"	m	class:PackData
xml	code\packdata.py	/^import xml.etree.ElementTree as et$/;"	i
Image	code\packer.py	/^from PIL import Image, ImageDraw$/;"	i
ImageDraw	code\packer.py	/^from PIL import Image, ImageDraw$/;"	i
PackData	code\packer.py	/^from code.packdata import PackData$/;"	i
Packer	code\packer.py	/^class Packer(object):$/;"	c
__init__	code\packer.py	/^	def __init__(self, modtype,fpath):$/;"	m	class:Packer
chkEmpty	code\packer.py	/^	def chkEmpty(self, name, elist):$/;"	m	class:Packer
copy2SVN	code\packer.py	/^from code.cleanprocess import copy2SVN$/;"	i
cutimg	code\packer.py	/^	def cutimg(self,data, imgfile, out):$/;"	m	class:Packer
et	code\packer.py	/^import xml.etree.ElementTree as et$/;"	i
etree	code\packer.py	/^import xml.etree.ElementTree as et$/;"	i
formatDir	code\packer.py	/^	def formatDir(self,fpath):$/;"	m	class:Packer
getEmpty	code\packer.py	/^	def getEmpty(self, mod):$/;"	m	class:Packer
mv2finalSource	code\packer.py	/^	def mv2finalSource(self, fdir, jsfl, fname=None):$/;"	m	class:Packer
runAll	code\packer.py	/^	def runAll(self, jsfl, ttdir, fdir):$/;"	m	class:Packer
ttcutimg	code\packer.py	/^	def ttcutimg(self,src):$/;"	m	class:Packer
ttpack	code\packer.py	/^	def ttpack(self,src,out):     #src directory name such sas 1_2 , 2_x ...$/;"	m	class:Packer
xml	code\packer.py	/^import xml.etree.ElementTree as et$/;"	i
LastOpNotClean	code\packexp.py	/^class LastOpNotClean(PackExp):$/;"	c
PackExp	code\packexp.py	/^class PackExp(Exception):$/;"	c
SVNotFound	code\packexp.py	/^class SVNotFound(PackExp):$/;"	c
__init__	code\packexp.py	/^	def __init__(self, logs,fname='errors.txt'):$/;"	m	class:PackExp
__init__	code\packexp.py	/^	def __init__(self, logs=''):$/;"	m	class:LastOpNotClean
__init__	code\packexp.py	/^	def __init__(self,logs):$/;"	m	class:SVNotFound
datetime	code\packexp.py	/^from datetime import datetime$/;"	i
getPath	code\packexp.py	/^	def getPath(self):$/;"	m	class:PackExp
mail	code\packexp.py	/^	def mail(self, receiver, subject, fname=None, mbody=None ):$/;"	m	class:PackExp
wlog	code\packexp.py	/^	def wlog(self):$/;"	m	class:LastOpNotClean
wlog	code\packexp.py	/^	def wlog(self):$/;"	m	class:PackExp
wlog	code\packexp.py	/^	def wlog(self):$/;"	m	class:SVNotFound
Preprocess	code\preprocess.py	/^class Preprocess(object):$/;"	c
__init__	code\preprocess.py	/^	def __init__(self):$/;"	m	class:Preprocess
chkPath	code\preprocess.py	/^	def chkPath(self, path):$/;"	m	class:Preprocess
copy2tmpsrc	code\preprocess.py	/^	def copy2tmpsrc(self,dirs, dest, name=None):$/;"	m	class:Preprocess
formatType	code\preprocess.py	/^	def formatType(self,fn):$/;"	m	class:Preprocess
getpath	code\preprocess.py	/^	def getpath(self):$/;"	m	class:Preprocess
preprocess	code\preprocess.py	/^	def preprocess(self):$/;"	m	class:Preprocess
reFiles	code\preprocess.py	/^	def reFiles(self, dest):$/;"	m	class:Preprocess
renameCN	code\preprocess.py	/^	def renameCN(self):$/;"	m	class:Preprocess
DEBUG	code\sendmail.py	/^from code.misc import DEBUG$/;"	i
MIMEMultipart	code\sendmail.py	/^from email.mime.multipart import MIMEMultipart$/;"	i
MIMEText	code\sendmail.py	/^from email.mime.text import MIMEText$/;"	i
MYRECEIVER	code\sendmail.py	/^	MYRECEIVER = ['190971120@qq.com','2319406132@qq.com']$/;"	v
MYRECEIVER	code\sendmail.py	/^	MYRECEIVER = ['2319406132@qq.com']$/;"	v
SUCCBODY	code\sendmail.py	/^SUCCBODY = '打包%s完成'$/;"	v
SUCCSUBJECT	code\sendmail.py	/^SUCCSUBJECT = '打包完成'$/;"	v
sendMail	code\sendmail.py	/^def sendMail(receiver,subject,fname=None,mbody=None,server=None):$/;"	f
smtplib	code\sendmail.py	/^import smtplib$/;"	i
Soldier	code\soldier.py	/^class Soldier(Packer):$/;"	c
__init__	code\soldier.py	/^	def __init__(self,mod):$/;"	m	class:Soldier
dealPng	code\soldier.py	/^	def dealPng(self, src):$/;"	m	class:Soldier
Body	run.py	/^from code.body import Body$/;"	i
Building	run.py	/^from code.building import Building$/;"	i
DBody	run.py	/^from code.dbody import DBody$/;"	i
DHead	run.py	/^from code.dhead import DHead$/;"	i
FLOCK	run.py	/^from code.misc import genThread, FLOCK$/;"	i
Head	run.py	/^from code.head import Head$/;"	i
Preprocess	run.py	/^from code.preprocess import Preprocess$/;"	i
Soldier	run.py	/^from code.soldier import Soldier$/;"	i
genThread	run.py	/^from code.misc import genThread, FLOCK$/;"	i
pprocess	run.py	/^pprocess = Preprocess()$/;"	v
process	run.py	/^def process(pprocess, flock):$/;"	f
run	run.py	/^def run(pack, jsfl, ttdir, fdir, flock):$/;"	f
PackData	test.py	/^from code.packdata import PackData$/;"	i
PackExp	test.py	/^from code.packexp import PackExp$/;"	i
Soldier	test.py	/^from code.soldier import Soldier$/;"	i
backpng	test.py	/^backpng = PackData.wlabel(dirname,pngnums,pdata.status,dict(),titem)$/;"	v
backpngs	test.py	/^backpngs = PackData.wpics(dirname, pngxy,dict(),out+'_cut', titem)$/;"	v
code	test.py	/^import code.packHelper as helper$/;"	i
copySVN	test.py	/^from code.cleanprocess import copySVN$/;"	i
dirname	test.py	/^dirname = '1_1'$/;"	v
fn	test.py	/^fn = r'D:\\dev\\packflash\\tmp\\tempsource\\armor_factory-jz'$/;"	v
helper	test.py	/^import code.packHelper as helper$/;"	i
ibn	test.py	/^		ibn = helper.baseName(i)$/;"	v
jsfl	test.py	/^jsfl = r'D:\\dev\\packflash\\tmp\\kpjsfl'$/;"	v
modname	test.py	/^modname = 'armor_factory'$/;"	v
os	test.py	/^import os$/;"	i
out	test.py	/^out = r'd:\\dev\\packflash\\tmp\\texture\\armor_factory-jz'$/;"	v
pdata	test.py	/^pdata = PackData(fn)$/;"	v
pngnums	test.py	/^pngnums =PackData.countPics(fn,pdata.subdir,pdata.status)$/;"	v
pngxy	test.py	/^pngxy = PackData.getitems(out,pdata.subdir,replace=dict())$/;"	v
root	test.py	/^root = PackData.genroot(modname)$/;"	v
titem	test.py	/^titem = PackData.witem(root)$/;"	v
tmp	test.py	/^tmp = helper.scanFile(out)$/;"	v
xmlpath	test.py	/^xmlpath = dict()$/;"	v
code	tmp.py	/^import code.packHelper as helper$/;"	i
dest	tmp.py	/^dest = 'd:\/dev\/packflash\/tmp\/tempsource'$/;"	v
dirs	tmp.py	/^dirs = helper.scanDir(srcdir)$/;"	v
helper	tmp.py	/^import code.packHelper as helper$/;"	i
os	tmp.py	/^import os $/;"	i
print_function	tmp.py	/^from __future__ import print_function$/;"	i
srcdir	tmp.py	/^srcdir = 'd:\/dev\/packflash\/src'$/;"	v
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
